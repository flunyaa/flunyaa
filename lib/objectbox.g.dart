// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/proxy.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4275758287727527017),
      name: 'ProxyConfiguration',
      lastPropertyId: const IdUid(7, 6615983320339167893),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6204843918676285299),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4004387738986963882),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4774067618547091527),
            name: 'host',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 176979482542653182),
            name: 'port',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3554639194102685495),
            name: 'selected',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1502743797879683162),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6615983320339167893),
            name: 'password',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 4275758287727527017),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ProxyConfiguration: EntityDefinition<ProxyConfiguration>(
        model: _entities[0],
        toOneRelations: (ProxyConfiguration object) => [],
        toManyRelations: (ProxyConfiguration object) => {},
        getId: (ProxyConfiguration object) => object.id,
        setId: (ProxyConfiguration object, int id) {
          object.id = id;
        },
        objectToFB: (ProxyConfiguration object, fb.Builder fbb) {
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final hostOffset =
              object.host == null ? null : fbb.writeString(object.host!);
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, typeOffset);
          fbb.addOffset(2, hostOffset);
          fbb.addInt64(3, object.port);
          fbb.addBool(4, object.selected);
          fbb.addOffset(5, usernameOffset);
          fbb.addOffset(6, passwordOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProxyConfiguration()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..type = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..host = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..port =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10)
            ..selected =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false)
            ..username = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..password = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ProxyConfiguration] entity fields to define ObjectBox queries.
class ProxyConfiguration_ {
  /// see [ProxyConfiguration.id]
  static final id =
      QueryIntegerProperty<ProxyConfiguration>(_entities[0].properties[0]);

  /// see [ProxyConfiguration.type]
  static final type =
      QueryStringProperty<ProxyConfiguration>(_entities[0].properties[1]);

  /// see [ProxyConfiguration.host]
  static final host =
      QueryStringProperty<ProxyConfiguration>(_entities[0].properties[2]);

  /// see [ProxyConfiguration.port]
  static final port =
      QueryIntegerProperty<ProxyConfiguration>(_entities[0].properties[3]);

  /// see [ProxyConfiguration.selected]
  static final selected =
      QueryBooleanProperty<ProxyConfiguration>(_entities[0].properties[4]);

  /// see [ProxyConfiguration.username]
  static final username =
      QueryStringProperty<ProxyConfiguration>(_entities[0].properties[5]);

  /// see [ProxyConfiguration.password]
  static final password =
      QueryStringProperty<ProxyConfiguration>(_entities[0].properties[6]);
}
